1. Overview  

Heap Sort is a comparison-based sorting algorithm that uses a **binary heap** data structure.  
It first builds a **max heap** from the input data and then extracts the maximum element  
from the heap one by one, placing it at the end of the sorted array.  

---

2. Pseudocode  

HeapSort(arr): 1. Build a max heap from the input array. 2. Repeat until the heap is empty: a. Swap the first (largest) element with the last element. b. Reduce the heap size. c. Heapify the root element to maintain the heap property.


Heapify(arr, n, i):

1. Set largest = i (root node)
2. Set left = 2*i + 1
3. Set right = 2*i + 2
4. If left < n and arr[left] > arr[largest], set largest = left
5. If right < n and arr[right] > arr[largest], set largest = right
6. If largest is not i:
   a. Swap arr[i] with arr[largest]
   b. Recursively heapify the affected subtree
   
---

3. Complexity Analysis  

- **Best Case:** `O(n log n)` (Already sorted data)  
- **Average Case:** `O(n log n)` (Random data)  
- **Worst Case:** `O(n log n)` (Reverse sorted data)  
- **Space Complexity:** `O(1)` (In-place sorting, no extra memory used)  

---

4. Why Choose Heap Sort?  

- Consistent Performance: Runs in `O(n log n)` in all cases, unlike Quick Sort (`O(nÂ²)` worst case).  
- Efficient for Large Datasets: Works well with large input sizes due to its predictable performance.  
- Stable Memory Usage: Unlike Merge Sort (`O(n)` extra space), Heap Sort sorts **in-place** using `O(1)` additional memory.  

---

5. Implementation in Java  

The implementation is available in `SortingAlgorithms.java` under the `heapSort` method.  
It sorts an array of **Shape** objects based on a given **Comparator** (height, base area, or volume).  

   
   
   
   
   